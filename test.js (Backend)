const express = require('express');
const { MongoClient, ServerApiVersion, ObjectId } = require('mongodb');
var cors = require('cors')

const uri = "mongodb+srv://Sarabeshwaran:Sarabesh6460@cluster0.gl7zdq9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});


const app = express();
const port = process.env.PORT || 3000;

app.use(cors())
  
app.use(express.json());

let usersCollection;
async function initDB() {
  await client.connect();
  const database = client.db("zomato");
  usersCollection = database.collection("user");
}
initDB();

app.post('/register', async (req, res) => {
  try {
    const result = await usersCollection.insertOne(req.body);
    res.status(201).json({ insertedId: result.insertedId });
  } catch (error) {
    console.error("Error inserting user:", error);
    res.status(500).send("Internal Server Error");
  }
});

app.get('/users', async (req, res) => {
  try {
    const users = await usersCollection.find().toArray();
    res.status(200).json(users);
  } catch (error) {
    console.error("Error fetching users:", error);
    res.status(500).send("Internal Server Error");
  }
});

app.put('/update/:id', async (req, res) => {
  try {
    const { id } = req.params;

    if (!ObjectId.isValid(id)) {
      return res.status(400).send("Invalid ID format");
    }

    const result = await usersCollection.updateOne(
      { _id: new ObjectId(id) },
      { $set: req.body }
    );

    if (result.matchedCount === 0) {
      return res.status(404).send("User not found");
    }

    res.status(200).send("User updated successfully");
  } catch (error) {
    console.error("Error updating user:", error);
    res.status(500).send("Internal Server Error");
  }
});

app.delete('/delete/:id', async (req, res) => {
  try {
    const { id } = req.params;

    if (!ObjectId.isValid(id)) {
      return res.status(400).send("Invalid ID format");
    }

    const result = await usersCollection.deleteOne({ _id: new ObjectId(id) });

    if (result.deletedCount === 0) {
      return res.status(404).send("User not found");
    }

    res.status(200).send("User deleted successfully");
  } catch (error) {
    console.error("Error deleting user:", error);
    res.status(500).send("Internal Server Error");
  }
});

app.listen(port, () => {
  console.log(`âœ… Server is running on port ${port}`);
});
